version: '3.8'

services:
  vekta-api:
    build: .
    container_name: vekta-api
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=info
      - API_VERSION=1.0.0
    volumes:
      - ./generated_workouts:/app/generated_workouts
      - ./chroma_db:/app/chroma_db
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - vekta-network

  # ChromaDB standalone (optionnel pour production)
  chromadb:
    image: chromadb/chroma:latest
    container_name: vekta-chromadb
    ports:
      - "8001:8000"
    environment:
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=chromadb.auth.token.TokenAuthCredentialsProvider
      - CHROMA_SERVER_AUTH_TOKEN_TRANSPORT_HEADER=X-Chroma-Token
      - CHROMA_SERVER_AUTH_CREDENTIALS=vekta-token-2024
    volumes:
      - chromadb_data:/chroma/chroma
    restart: unless-stopped
    networks:
      - vekta-network

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: vekta-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - vekta-network

  # Grafana pour les dashboards (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: vekta-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=vekta2024
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - vekta-network

  # Nginx reverse proxy (optionnel pour production)
  nginx:
    image: nginx:alpine
    container_name: vekta-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - vekta-api
    restart: unless-stopped
    networks:
      - vekta-network

volumes:
  chromadb_data:
  prometheus_data:
  grafana_data:

networks:
  vekta-network:
    driver: bridge 